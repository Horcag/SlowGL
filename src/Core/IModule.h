#ifndef IMODULE_H
#define IMODULE_H

#include <string>
#include <SFML/Window/Event.hpp>

namespace sgl {
    class SFMLImage;

    /**
     * @class IModule
     * @brief Базовый интерфейс для всех модулей в SlowGL Framework
     *
     * Класс IModule определяет основной интерфейс для создания модулей,
     * которые могут быть зарегистрированы в ModuleManager и использованы
     * в приложении. Каждый модуль представляет собой независимую
     * функциональную единицу с собственной логикой, рендерингом и
     * пользовательским интерфейсом.
     */
    class IModule {
    public:
        /**
         * @brief Виртуальный деструктор
         */
        virtual ~IModule() = default;

        /**
         * @brief Возвращает название модуля
         * @return Строка с названием модуля
         */
        [[nodiscard]] virtual std::string getName() const = 0;

        /**
         * @brief Возвращает описание модуля
         * @return Строка с описанием модуля
         */
        [[nodiscard]] virtual std::string getDescription() const = 0;

        /**
         * @brief Инициализирует модуль
         *
         * Вызывается при первой активации модуля или при его повторном выборе.
         * Используется для настройки начального состояния модуля.
         */
        virtual void init() = 0;

        /**
         * @brief Обновляет состояние модуля
         *
         * Вызывается каждый кадр для обновления внутреннего состояния модуля,
         * обработки логики, анимаций и т.д.
         *
         * @param deltaTime Время, прошедшее с предыдущего кадра в секундах
         */
        virtual void update(float deltaTime) = 0;

        /**
         * @brief Отрисовывает содержимое модуля
         *
         * Выполняет рендеринг визуального содержимого модуля в предоставленное изображение.
         *
         * @param image Изображение, в которое выполняется рендеринг
         */
        virtual void render(SFMLImage&image) = 0;

        /**
         * @brief Отрисовывает пользовательский интерфейс модуля
         *
         * Создает и отрисовывает элементы управления и информационные
         * панели модуля с использованием ImGui.
         */
        virtual void renderUI() = 0;

        /**
         * @brief Обрабатывает события SFML
         *
         * Обрабатывает события ввода, такие как нажатия клавиш,
         * движения мыши и т.д.
         *
         * @param event Событие SFML для обработки
         */
        virtual void handleEvent(const sf::Event&event) = 0;

        /**
         * @brief Обрабатывает изменение размера окна или области рендеринга
         *
         * Вызывается при изменении размера окна или области рендеринга,
         * чтобы модуль мог соответствующим образом адаптироваться.
         *
         * @param width Новая ширина области рендеринга
         * @param height Новая высота области рендеринга
         */
        virtual void resize(unsigned int width, unsigned int height) = 0;
    };
}

#endif // IMODULE_H
